/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


Realizado por:
Luisa Mora e Isabella Ortiz.

 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
    DEBUG_PARSER = true;
    
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.util.ArrayList;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.List;


@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private static HashMap<String,String > variablesH = new HashMap<String,String >();
	private static ArrayList<String> parametrosH = new ArrayList<String>();
	private static HashMap<String, ArrayList<Token>> funciones = new HashMap<String, ArrayList<Token>>();
	private static ArrayList<String> globales =  new ArrayList<String>();
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}

class ListTokenManager extends RobotTokenManager {
	    private List<Token> tokens;
	    private int index = 0;
	
	    public ListTokenManager(List<Token> tokens) {
	        super(null);
	        this.tokens = tokens;
	    }
	
	    private Token eof = null;

		@Override
		public Token getNextToken() {
		    if (index < tokens.size()) {
		        return tokens.get(index++);
		    }
		    
		    if (eof == null) {
		        eof = new Token();
		        eof.kind = 0;
		    }
		    
		    return eof;
		}

	    }

PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}



TOKEN:
{
		<BALLOONS:  "#BALLOONS" >
		|	<CHIPS:     "#CHIPS"  >	

}



TOKEN [IGNORE_CASE]:
{
< THEN : "THEN" >
| < ELSE  : "ELSE" >
| < DO : "DO" >
| < OD : "OD" >
| < REP : "REP" >
| < PER : "PER" >
| < TIMES: "TIMES" >
| <FACING: "facing"> 
| <CANPUT: "canPut"> 
| <CANPICK: "canPick"> 
| <CANMOVE: "canMove"> 
| <CANJUMP: "canJump"> 
| <NOT: "not">
}




TOKEN: /*Istrucciones*/
{
	< GOTO : "goto">
| < MOVE : "move">
| < TURN : "turn">
| < FACE : "face">
| < PUT : "put">
| < PICK : "pick">
| < JUMP : "jump">
| < NOP : "nop">
| < IF : "if">
| < WHILE : "while">
| < FOR : "for"> 
  
}

TOKEN:
{
	< LEFT : "#left" >
| < RIGHT : "#right" >
|  < AROUND : "#around" >

}

TOKEN:
{
	< NORTH : "#north" >
| < EAST : "#east" >
|  < SOUTH : "#south" >
|  < WEST : "#west" >

}

TOKEN:
{
  < FRONT : "#front" >
| < BACK : "#back" >
}

TOKEN:
{
  < PROC: "proc" >
}


TOKEN : 
{
  < IDENTIFIER: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])* >
  | < NUM: (["0"-"9"])+  >
}

TOKEN : {
    <AND_PREFIXED : "and" < IDENTIFIER > ":" >
  |  <WITH_PREFIXED : "with" < IDENTIFIER > ":">
}






	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
    (
    inicial()
    {
        try {
            Thread.sleep(900);
        } catch (InterruptedException e) {
            System.err.format("IOException: %s%n", e);
        }
        sistema.printOutput(salida);
        return true;
    })+

    | <EOF> { return false; }
	}


	void inicial():
	{}
	{
	  	(proc()| parseVariable()| parseCodeBlock())+
	} 
	

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	

	void proc() :
	{
	    String param = "";
	    String paramKey = "";
	    String nombreFuncion = "";
	}
	{
	    <PROC> 
	    nombreFuncion = identifier()
	    { funciones.put(nombreFuncion, new ArrayList<>()); }
	    (
	      {System.out.println("Tengo parámetros");}
	        ":"
	        (param = <IDENTIFIER>.image)
	        {
	            parametrosH.add(param); 
	        }
	        
	        (
		        ( < WITH_PREFIXED > | < AND_PREFIXED >) param = <IDENTIFIER>.image
		        {
		            parametrosH.add(param); 
		        }
	        )*
	    )?
	    {System.out.println("Lista de parámetros: " + parametrosH);}
	    parseDefBlock()
	    
	}


	void parseDefBlock():
	{
	    String num = "";
	    ArrayList<Token> tokens = new ArrayList<>();
	    Token savedToken = token; 
	}
	{
	    "[" 
	    /*{
	        Token t = savedToken.next; 
	        while (t != null && t.kind != 0) {  
	            if (t.image.equals("]")) break;  
	            tokens.add(t);  
	            t = t.next;
	        }
	        funciones.put(nombreFuncion, tokens);
	    } */ 
	
	(
	    parseGoto(false)
	    | anteparseMove(false)
	    | parseTurn(false) 
	    | parseFace(false) 
	    | parsePut(false)
	    | parsePick(false) 
	    | anteparseJump(false) 
	    | parseNop(false) 
	    | < BALLOONS >
	    | < CHIPS >
	    | parseVariable() (parseAsignacion())+
	    | parseWhile(false, nombreFuncion)
	    | parseFor(false)
	)+
	"]"
	{
	    variablesH.clear();
	    parametrosH.clear();
	    System.out.println("Las variables y los parámetros han sido reiniciados.");
	}
	}


	void parseCodeBlock():
	{}
	{ "["
	(
	parseGoto(true)
	| anteparseMove(true)
	| parseTurn(true) 
	| parseFace(true) 
	| parsePut(true)
	| parsePick(true) 
	| anteparseJump(true) 
	| parseNop(true) 
	/*| < IF > parseIf()
	| < WHILE > parseWhile()*/
	| parseFor(true)
	| < BALLOONS >
	| < CHIPS >
	| parseVariable() (parseAsignacion())+
	| parseHashKey()
	)+
	"]"
	{ variablesH.clear(); parametrosH.clear();
	System.out.println("Las variables y los parametros han sido reiniciados.");
	}
	}


	void parseHashKey():
	{String key = "";}
	{
	  key = < IDENTIFIER >.image
		{
		  if (!funciones.contains(key)) {
			throw new ParseException("La funcion " + key + " no ha sido definida.");
		    }
		  else
		  { verificarTokens(key);}
		}
	}

	void verificarTokens(String nombreFuncion):
	{}
	{
		{
		  
	    ArrayList<Token> tokensEsperados = funciones.get(nombreFuncion);
	    
	    if (tokensEsperados == null) {
	        throw new ParseException("Error: No se encontró la función '" + nombreFuncion + "' en el hash.");
	    }
	
	    int index = 0;
	    Token t = getNextToken(); 
	
	    while (t.kind != 0 && !t.image.equals(".")) {  
	        if (index >= tokensEsperados.size()) {
	            throw new ParseException("Error: Más tokens de los esperados en '" + nombreFuncion + "'.");
	        }
	
	        Token esperado = tokensEsperados.get(index);
	
	        if (!t.image.equals(esperado.image)) {
	            throw new ParseException("Error: Se esperaba '" + esperado.image + "' pero se encontró '" + t.image + "'.");
	        }
	
	        index++;
	        t = getNextToken(); 
	    }
	
	    if (index < tokensEsperados.size()) {
	        throw new ParseException("Error: Faltan tokens en la ejecución de '" + nombreFuncion + "'.");
	    }
	  	}
	}
	

	String identifier():
	{
	  Token t;
	}
	{
	  t = <IDENTIFIER> { return t.image; }
	}



	void parseVariable():
	{String nomVar = "";}
	{
	"|" (nomVar = identifier() {
	  variablesH.put(nomVar, null);
	})+
	
	"|"
	{System.out.println("Hash de variablesH: " + variablesH); }
	}

	void parseAsignacion():
		{
		 String nomVar = "";
		 String valor = "";
		}
		{		    nomVar = identifier()
			{
			  if (!variablesH.containsKey(nomVar)) {
		      	System.out.println("La variable " + nomVar + " no ha sido definida.");
		      	throw new ParseException("La variable " + nomVar + " no ha sido definida.");
		    	}
		    	else { System.out.println("La variable " + nomVar + " está en la lista de variables.");}
			}
		":="
		(
		  valor = <NUM>.image
		  { variablesH.put(nomVar, valor); System.out.println(variablesH);}
		|valor = identifier()
			{ if (parametrosH.contains(valor)) {
			  variablesH.put(nomVar, valor);
			  System.out.println(variablesH);
			  }
			  else {
			    System.out.println("A lo que se quiere asignar la variable " + nomVar + " no existe como parametro");
				throw new ParseException("A lo que se quiere asignar la variable " + nomVar + " no existe como parametro");
			     } 
			  }
		) 
		"."
		}

	void parseGoto(boolean ejecucion) :
	{
	    String posX = "";
	    String posY = "";
	}
	{< GOTO >
	    ":"
	    (posX = <NUM>.image | posX = identifier()) 
	    {
			if (!ejecucion) { 
	        validarParam(posX); }
	        else { 
	        posX = validarYAsignar(posX); }
	    }
	    "with:"
	    (posY = <NUM>.image | posY = identifier())
	    {
	      if (!ejecucion) { 
	      validarParam(posY); }
	      else { 
	      posY = validarYAsignar(posY); }
	    }
	    "."
	    {   
	        if (ejecucion) {
				ejecutarGoto(posX,posY);
	        }
	    }
	    
	}

	void ejecutarGoto(String x, String y):
	{}
	{
	  { int intx = Integer.parseInt(x);
	  int inty = Integer.parseInt(y); }
	  {world.setPostion(intx,inty); salida = "COMMAND: goTo";}
	}


	void anteparseMove(boolean ejecucion) :
	{String num = "";}
	{
	  <MOVE> ":" (num = <NUM>.image | num = identifier() { if (!ejecucion) { validarParam(num); } }) 
          (
            "toThe:" parseMoveToThe(ejecucion, num) 
            | "inDir:" parseMoveInDir(ejecucion, num) 
            | "." parseMove(ejecucion, num)
          )
	    
	}

	void anteparseJump(boolean ejecucion):
	{String num = "";}
	{
	  < JUMP > ":" (num = <NUM>.image | num = identifier() { if (!ejecucion) { validarParam(num); } })
	  ("toThe:" parseJumpToThe(ejecucion, num) | "inDir" parseJumpInDir(ejecucion, num))
	}

	void parseMove(boolean ejecucion, String num):
	{}
	{
       {  if (ejecucion) {
			ejecutarMove(num);
        }
      }
	}

	void ejecutarMove(String num):
	{}
	{
	  { int intnum = Integer.parseInt(num); }
	  { world.moveForward(intnum,false); salida = "COMMAND: MOVE"; }
	}

	void parseTurn(boolean ejecucion) :
	{
	    String D = "";
	}
	{< TURN > 
	    ":"
	    (D = <LEFT>.image | D = <RIGHT>.image | D = <AROUND>.image)
	    "."
	    {
	        if (ejecucion) {
				ejecutarTurn(D);
	        }
	    }
	    
	}

	void ejecutarTurn(String D):
	{}
	{ 
	  { if (D.equals("#left"))
			  {world.turnRight(); world.turnRight();world.turnRight();}
		else if (D.equals("#right"))
			  {world.turnRight();}
		else
			{world.turnRight(); world.turnRight();}
	}
	}

	void parseFace(boolean ejecucion) :
	{
	    String O = "";
	}
	{< FACE > 
	    ":"
	    (O = <NORTH>.image | O = <SOUTH>.image | O = <EAST>.image | O = <WEST>.image)
	    "."
	    {
	        if (ejecucion) {
				ejecutarFace(O);
	        }
	    }
	    
	}

	void ejecutarFace(String O):
	{}
	{
	  { if (O.equals("#north")) {
			faceNorthExec();
	    }
		else if (O.equals("#south")) {
			faceSouthExec();
	    }
	    else if (O.equals("#east")) {
			faceEastExec();
	    }
	    else if (O.equals("#west")) {
			faceWestExec();
	    }
	     }
	}

	void faceNorthExec():
	{}
	{
	   { if (world.facingWest())
			{world.turnRight();}
		else if (world.facingSouth())
			{world.turnRight(); world.turnRight();}
		else if (world.facingEast())
			{world.turnRight(); world.turnRight(); world.turnRight();}
		 } }

	void faceSouthExec():
	{ }
	{
	 {  if (world.facingNorth())
			{world.turnRight(); world.turnRight();}
		else if (world.facingEast())
			{ world.turnRight();}
		else if (world.facingWest())
			{world.turnRight();world.turnRight();world.turnRight();}
			 } 
	}
	
	void faceEastExec():
	{}
	{
	   { if (world.facingNorth())
			{world.turnRight();}
		else if (world.facingWest())
			{world.turnRight();world.turnRight();}
		else if (world.facingSouth())
			{world.turnRight();world.turnRight();world.turnRight();}} 
	}
	
	void faceWestExec():
	{ }
	{
	   { if (world.facingNorth())
			{ world.turnRight();world.turnRight();world.turnRight();}
		else if (world.facingEast())
			{world.turnRight();world.turnRight();}
		else if (world.facingSouth())
			{world.turnRight();}} 
	}
	


	void parsePut(boolean ejecucion) :
	{
	    String n = "";
	    String X = "";
	}
	{< PUT > 
	    ":"
	    (n = <NUM>.image | n = identifier()) 
	    {
	        if (!ejecucion) { 
	        validarParam(n); }
	        else {
			n = validarYAsignar(n);
	        }
	    }
	    "ofType:"
	    (X = <BALLOONS>.image | X = <CHIPS>.image)
	    "."
	    {
			if (ejecucion) {
				ejecutarPut(n, X);
			  }
	    }
	    
	}

	void ejecutarPut(String Nnum, String Xtype):
	{}
	{
	  {int Nnumint = Integer.parseInt(Nnum);}
	  {	if (Xtype.equals("#balloons")) {
	   		world.putBalloons(Nnumint);
		}
		else if (Xtype.equals("#chips")) {
		  	world.putChips(Nnumint);
		} }
	}

	void parsePick(boolean ejecucion) :
	{
	    String n = "";
	    String X = "";
	}
	{< PICK > 
	    ":"
	    (n = <NUM>.image | n = identifier()) 
	    {
	        if (!ejecucion) { 
	        validarParam(n); }
	        else {
			n = validarYAsignar(n);
	          }
	    }
	    "ofType:"
	    (X = <BALLOONS>.image | X = <CHIPS>.image)
	    "."
	    {
			if (ejecucion) {
				ejecutarPick(n, X);
			  }
	    }
	    
	}

	void ejecutarPick(String Nnum, String Xtype):
	{}
	{
	  {int Nnumint = Integer.parseInt(Nnum);}
	  {	if (Xtype.equals("#balloons")) {
			world.grabBalloons(Nnumint);
		}
		else if (Xtype.equals("#chips")) {
			world.pickChips(Nnumint);
		} }
	}

	void parseMoveToThe(boolean ejecucion, String num) :
	{
	    String D = "";
	}
	{
	    (D = <FRONT>.image | D = <RIGHT>.image | D = <LEFT>.image | D = <BACK>.image)
	    "."
	    {
			if (ejecucion) {
				ejecutarMoveToThe(num, D);
			  }
	    }
	    
	}

	void ejecutarMoveToThe(String num, String D) :
	{}
	{
	    {
	        int intnum = Integer.parseInt(num);
	        
	        if (D.equals("#front")) {
	            world.moveForward(intnum, false);
	        }
	        else if (D.equals("#right")) {
	            world.turnRight();
	            world.moveForward(intnum, false);
	            world.turnRight();world.turnRight();world.turnRight(); 
	        }
	        else if (D.equals("#left")) {
	            world.turnRight();world.turnRight();world.turnRight();
	            world.moveForward(intnum, false);
	            world.turnRight(); 
	        }
	        else if (D.equals("#back")) {
	            world.turnRight();world.turnRight();
	            world.moveForward(intnum, false);
	            world.turnRight();world.turnRight(); 
	        }
	        
	        salida = "COMMAND: MOVE toThe " + D;
	    }
	}

	

	void parseMoveInDir(boolean ejecucion,String num) :
	{
	    String O = "";
	}
	{
	    (O = <NORTH>.image | O = <SOUTH>.image | O = <EAST>.image |O = <WEST>.image)
	    "."
	    {
			if (ejecucion) {
				ejecutarMoveInDir(num, O);
			  }
	    }
	}

	void ejecutarMoveInDir(String num, String O):
	{}
	{
	  { int numint =  Integer.parseInt(num);}
	  { if (O.equals("#north")) {
			faceNorthExec();
			world.moveForward(numint, false);
	    }
		else if (O.equals("#south")) {
			faceSouthExec();
			world.moveForward(numint, false);
	    }
	    else if (O.equals("#east")) {
			faceEastExec();
			world.moveForward(numint, false);
	    }
	    else if (O.equals("#west")) {
			faceWestExec();
			world.moveForward(numint, false);
	    }
	     }
	}

	void parseJumpToThe(boolean ejecucion,String num) :
	{
	    String D = "";
	}
	{
	    (D = <FRONT>.image | D = <RIGHT>.image | D = <LEFT>.image | D = <BACK>.image)
	    "."
	    {
			if (ejecucion) {
				ejecutarJumpToThe(num, D);
			  }
	    }
	    
	}

	void ejecutarJumpToThe(String num, String D) :
	{}
	{
	    {
	        int intnum = Integer.parseInt(num);
	        
	        if (D.equals("#front")) {
	            world.moveForward(intnum, true);
	        }
	        else if (D.equals("#right")) {
	            world.turnRight();
	            world.moveForward(intnum, true);
	            world.turnRight();world.turnRight();world.turnRight(); 
	        }
	        else if (D.equals("#left")) {
	            world.turnRight();world.turnRight();world.turnRight();
	            world.moveForward(intnum, true);
	            world.turnRight(); 
	        }
	        else if (D.equals("#back")) {
	            world.turnRight();world.turnRight();
	            world.moveForward(intnum, true);
	            world.turnRight();world.turnRight(); 
	        }
	        
	        salida = "COMMAND: JUMP";
	    }
	}


	void parseJumpInDir(boolean ejecucion, String num) :
	{
	    String D = "";
	}
	{
	    (D = <NORTH>.image | D = <EAST>.image | D = <WEST>.image | D = <SOUTH>.image)
	    "."
	    {
			if (ejecucion) {
				ejecutarjumpInDir(num, D);
			  }
	    }
	    
	}

	void ejecutarjumpInDir(String num, String O):
	{}
	{
	  { int numint =  Integer.parseInt(num);}
	  { if (O.equals("#north")) {
			faceNorthExec();
			world.moveForward(numint, true);
	    }
		else if (O.equals("#south")) {
			faceSouthExec();
			world.moveForward(numint, true);
	    }
	    else if (O.equals("#east")) {
			faceEastExec();
			world.moveForward(numint, true);
	    }
	    else if (O.equals("#west")) {
			faceWestExec();
			world.moveForward(numint, true);
	    }
	     }
	}

	void parseNop(boolean ejecucion):
	{}
	{
	  < NOP > "." //me ahorras sufrimiento nop te amo gracias por tanto
	}

	String validarYAsignar(String variable) :
	{ }
	{
	    {
	        if (!variable.matches("\\d+")) {
	            if (!variablesH.containsKey(variable) && (!parametrosH.contains(variable))) {
	              	System.out.println("La variable " + variable + " no existe y tampoco es un parámetro.");
					throw new ParseException("La variable " + variable + " no existe y tampoco es un parámetro.");
	            }
	            if (variablesH.get(variable) == null) {
	                System.out.println("La variable " + variable + " no ha sido definida.");
	                throw new ParseException("La variable " + variable + " no ha sido definida.");
	            }
	            return variablesH.get(variable); 
	        } 
	        else { return variable; }
	    }
	}

	void validarParam(String variable) :
	{}
	{
	{
	  if (!variable.matches("\\d+")) {
	    if ( (!variablesH.containsKey(variable) | (variablesH.get(variable) == null)) && (!parametrosH.contains(variable)) ) {
	      	System.out.println("Variables: " + variablesH + " Params: " + parametrosH );
			System.out.println("La variable " + variable + " no ha sido definida, no tiene valor o no es un parámetro.");
			throw new ParseException("La variable " + variable + " no ha sido definida, no tiene valor o no es un parámetro."); 
       
	    }
	  }
	}
	}

	int facingToInt(String facing):
	{}
	{
	  { if (facing.equals("#north")) {
	    	return 0;
	    }
	    else if (facing.equals("#south")) {
	    	return 1;
	    }
	    else if (facing.equals("#east")) {
	    	return 2;
	    }
	    else if (facing.equals("#west")) {
	    	return 3;
	    }
	  }
	}

	boolean parseCondition(boolean ejecucion, boolean isWhile, String nomFuncion) :
	{
	  	Point position;
	    String tok1 = "";
	    String num = "";
	    int condInt = 0;
	    int numint = 0;
	}
	{
	    <FACING> ":" (tok1 = <NORTH>.image | tok1 =<SOUTH>.image | tok1 =<EAST>.image | tok1 =<WEST>.image) "."
	    {
	      	if (ejecucion) {
				if (facingToInt(tok1) != world.getFacing()) {
					return false;
				  }
				 else { return true; }
	      	}
	    }
	    
	   /////
	  | <CANPUT> ":" ( num = < NUM >.image | num = identifier() { validarParam(num); } ) "ofType:" (tok1 = <BALLOONS>.image | tok1 = <CHIPS>.image) "."
	    {
	      	numint = Integer.parseInt(num);
	      	if (ejecucion) {
				if ((tok1.equals("#balloons") && (world.getMyBalloons() >= numint)) && !(world.isBlocked(world.getPosition()))) {
					return true;
				  }
				else if ((tok1.equals("#chips") && (world.getMyChips() >= numint)) && !(world.isBlocked(world.getPosition()))) {
					return true;
				  }
				else {
				  return false;
				  }
	      	}
	    }
	   /////
	  | <CANPICK> ":" ( num = < NUM >.image | num = identifier() { validarParam(num); } ) "ofType:" (tok1 = <BALLOONS>.image | tok1 = <CHIPS>.image) "."
	    {
			numint = Integer.parseInt(num);
	      	if (ejecucion) {
				if ((tok1.equals("#balloons") && (world.countBalloons(world.getPosition())) >= numint) && !(world.isBlocked(world.getPosition()))) {
					return true;
				  }
				else if ((tok1.equals("#balloons") && (world.chipsToPick() >= numint)) && !(world.isBlocked(world.getPosition()))) {
					return true;
				  }
				else {
				  return false;
				  }
	      	}
	    }
	  /////
	  | <CANMOVE> ":" ( num = < NUM >.image | num = identifier() { validarParam(num); } )
	  ( "inDir:" (tok1 = <NORTH>.image |tok1 = <SOUTH>.image |tok1 = <EAST>.image |tok1 = <WEST>.image) | "toThe:" (tok1 = <FRONT>.image |tok1 = <BACK>.image |tok1 = <LEFT>.image |tok1 = <RIGHT>.image) ) "."
	    {
			numint = Integer.parseInt(num);
			if (ejecucion) {
				if (tok1.equals("#north") | tok1.equals("#front")) {
				  for (int i = 0; i < numint; i++) {
    				boolean disponible = world.isBlocked(new Point(world.getPosition().x+i,world.getPosition().y));
    				if (!disponible) {
    				  return false;}
    				else {return true;}
					}
					
				  }
				else if (tok1.equals("#south") | tok1.equals("#back")) {
				  for (int i = 0; i < numint; i++) {
    				boolean disponible = world.isBlocked(new Point(world.getPosition().x-i,world.getPosition().y));
    				if (!disponible) {
    				  return false;}
    				else {return true;}
					}
					
				  }
				else if (tok1.equals("#east") | tok1.equals("#right") ) {
				  for (int i = 0; i < numint; i++) {
    				boolean disponible = world.isBlocked(new Point(world.getPosition().x,world.getPosition().y+i));
    				if (!disponible) {
    				  return false;}
    				else {return true;}
					}
					
				  }
				else if (tok1.equals("#west") | tok1.equals("#left")) {
				  for (int i = 0; i < numint; i++) {
    				boolean disponible = world.isBlocked(new Point(world.getPosition().x+i,world.getPosition().y-i));
    				if (!disponible) {
    				  return false;}
    				else {return true;}
					}
					
				  }
				
        	}
   		}

    | <CANJUMP> ":" (num = <NUM>.image | num = identifier() { validarParam(num); }) 
      ("inDir:" (tok1 = <NORTH>.image | tok1 = <SOUTH>.image | tok1 = <EAST>.image | tok1 = <WEST>.image) | 
       "toThe:" (tok1 = <FRONT>.image | tok1 = <BACK>.image | tok1 = <LEFT>.image | tok1 = <RIGHT>.image)) "."
    	{
        	numint = Integer.parseInt(num);
			if (ejecucion) {
				if (tok1.equals("#north") | tok1.equals("#front")) {
				  	return world.isBlocked(new Point(world.getPosition().x+numint,world.getPosition().y));
				  }
				else if (tok1.equals("#south") | tok1.equals("#back")) {
				  	return world.isBlocked(new Point(world.getPosition().x-numint,world.getPosition().y));
				}
				else if (tok1.equals("#east") | tok1.equals("#right") ) {
				  return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y+numint));
				  }
				else if (tok1.equals("#west") | tok1.equals("#left")) {
    				return world.isBlocked(new Point(world.getPosition().x,world.getPosition().y-numint));
				  }
    	}
   		}

    | <NOT> ":" {
        return !parseCondition(ejecucion, isWhile, nomFuncion);
    	}
	}

	void parseFor(boolean ejecucion):
		{ 
		    String times = ""; 
		    int numTimes = 0; 
		    Token startToken;
		}
		{
		    < FOR > ":" (times = < NUM >.image | times = identifier() { validarParam(times); }) "repeat:"
		    {
		        if (ejecucion) {
		            numTimes = Integer.parseInt(times); 
		            startToken = token; 
		            
		            for (int i = 0; i < numTimes; i++) { 
		                token = startToken; 
		                parseCodeBlock();   
		            }
		        } 
		        else { 
		            parseDefBlock(); 
		        }
		    }
		}



	void parseWhile(boolean ejecucion, String nombreFuncion):
		{
		    boolean condition;
		    Token startToken;
		    Token conditionToken;
		}
		{
		    < WHILE > ":" 
		    { 
		        conditionToken = token; 
		        condition = parseCondition(); 
		    } 
		    "do:" 
		    {
		        if (ejecucion) {
		            startToken = token; 
		            while (condition) {
		                token = startToken; 
		                parseCodeBlock(); 
		                token = conditionToken; 
		                condition = parseCondition(); 
		            }
		        }
		        else { 
		            parseDefBlock(); 
		        }
		    }
		}


	


	void callFunction():
	{
	    String nombreFuncion = "";
	}
	{
	    nombreFuncion = identifier()
	    {
	        if (funciones.containsKey(nombreFuncion)) {
	            executeFunction(nombreFuncion);
	        } else {
	            System.out.println("Error: La función " + nombreFuncion + " no está definida.");
	            throw new ParseException("La función " + nombreFuncion + " no existe.");
	        }
	    }
	}

	void executeFunction(String nombreFuncion):
	{}
	{
	    {
	      if (funciones.containsKey(nombreFuncion)) {
	        List<Token> tokens = funciones.get(nombreFuncion);
	
	        RobotTokenManager oldManager = token_source;
	        token_source = new ListTokenManager(tokens);
	
	        try {
	            parseCodeBlock();
	        } finally {
	            token_source = oldManager;
	        }
	    } else {
	        System.out.println("Error: Función " + nombreFuncion + " no está definida.");
	    }
	 	}
	}

	
	

	

	
		
	


	
	

    



 
	