/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.util.ArrayList;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.List;


@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private static Map<String,String > variables = new HashMap<String,String >();
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}



TOKEN:
{
		<BALLOONS:  "#BALLOONS" >
		|	<CHIPS:     "#CHIPS"  >	

}

TOKEN:
{
  < PROC: "proc" >
| < LOWER: ["a"-"z"] >
| < LETTER: ["A"-"Z"] | ["a"-"z"] >
}

TOKEN : 
{
  < IDENTIFIER: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])* >
  | < NUM: (["1"-"9"] ["0"-"9"])* | "0" >
}





TOKEN [IGNORE_CASE]:
{
< THEN : "THEN" >
| < ELSE  : "ELSE" >
| < DO : "DO" >
| < OD : "OD" >
| < REP : "REP" >
| < PER : "PER" >
| < TIMES: "TIMES" >

}

TOKEN: /*Istrucciones*/
{
	< GOTO : "goto">
| < MOVE : "move">
| < TURN : "turn">
| < FACE : "face">
| < PUT : "put">
| < PICK : "pick">
| < JUMP : "jump">
| < NOP : "nop">
| < IF : "if">
| < WHILE : "while">
| < FOR : "for"> 
  
}


	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(		< EOF>
		)+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}
	
	void parseIf() : {
	    Node condition;
	    Node thenBlock;
	    Node elseBlock = null;
	} {
	    <IF> condition = parseCondition() <THEN> thenBlock = parseBlock()
	    [ <ELSE> elseBlock = parseBlock() ]
	    {
	        System.out.println("If detected with condition: " + condition);
	    }
	}

	void parseCondition(): {
		//Queda pendiente porque no entendi el enunciado :'v
	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	

	void proc():
	{}
	{
	  <PROC> identifier() parseBlock() {codeblock(true, 1, "");}
	}

	void parseBlock():
	{}
	{ "["
	(	  < GOTO > parseGoto()
	| < MOVE > parseMove()
	| < TURN > parseTurn()
	| < FACE > parseFace()
	| < PUT > parsePut()
	| < PICK > parsePick()
	| < MOVE > parseMove()
	| < JUMP > parseJump()
	| < NOP > parseNop()
	| < IF > parseIf()
	| < WHILE > parseWhile()
	| < FOR > parseFor()
	| < BALLOONS >
	| < CHIPS >
	| parseVariable() parseAsignacion()
	)+ "]"
	  
	}

	String identifier():
	{
	  Token t;
	}
	{
	  t = <IDENTIFIER> { return t.image; }
	}



	void parseVariable():
	{String nomVar = "";}
	{
	"|" nomVar = identifier() "|"
	{
	  variables.put(nomVar, null);
	}
	}

	void parseAsignacion():
	{
	  String nomVar = "";
	 String valor = 0;
	 }
	{
	  nomVar = identifier()
	{
	  if (!variables.containsKey(nomVar)) {
      	System.out.println("La variable " + nomVar + " no ha sido definida.");
    	}
	}

	":="

	(valor = <NUM> | valor = identifier()) /*si es num se guarda en hash, si es identifier se busca en hash parametros*/

	{
    if (parametros.containsKey(valor) && !Arrays.asList("0", "1", "2", "3", "4", "5", "6", "7", "8", "9").contains(valor)) { 
		String param = parametros.get(valor);
        variables.put(nomVar, param);
    } else {
        variables.put(nomVar, valor); 
    }
	}
	"."
	}

	
		

	   
   

	
	